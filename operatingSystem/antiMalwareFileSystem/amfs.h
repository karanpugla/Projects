/*
* Copyright (c) 1998-2014 Erez Zadok
* Copyright (c) 2009	   Shrikar Archak
* Copyright (c) 2003-2014 Stony Brook University
* Copyright (c) 2003-2014 The Research Foundation of SUNY
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License version 2 as
* published by the Free Software Foundation.
*/

#ifndef _AMFS_H_
#define _AMFS_H_

#include <linux/dcache.h>
#include <linux/file.h>
#include <linux/fs.h>
#include <linux/aio.h>
#include <linux/mm.h>
#include <linux/mount.h>
#include <linux/namei.h>
#include <linux/seq_file.h>
#include <linux/statfs.h>
#include <linux/fs_stack.h>
#include <linux/magic.h>
#include <linux/uaccess.h>
#include <linux/slab.h>
#include <linux/sched.h>
#include <linux/stat.h>
#include <linux/parser.h>
#include <linux/xattr.h>

/* the file system name */
#define AMFS_NAME "amfs"

/* amfs root inode number */
#define AMFS_ROOT_INO     1

/* useful for tracking code reachability */
#define UDBG printk(KERN_DEFAULT "DBG:%s:%s:%d\n", __FILE__, __func__, __LINE__)

/* operations vectors defined in specific files */
extern const struct file_operations amfs_main_fops;
extern const struct file_operations amfs_dir_fops;
extern const struct inode_operations amfs_main_iops;
extern const struct inode_operations amfs_dir_iops;
extern const struct inode_operations amfs_symlink_iops;
extern const struct super_operations amfs_sops;
extern const struct dentry_operations amfs_dops;
extern const struct address_space_operations amfs_aops, amfs_dummy_aops;
extern const struct vm_operations_struct amfs_vm_ops;

extern int amfs_init_inode_cache(void);
extern void amfs_destroy_inode_cache(void);
extern int amfs_init_dentry_cache(void);
extern void amfs_destroy_dentry_cache(void);
extern int new_dentry_private_data(struct dentry *dentry);
extern void free_dentry_private_data(struct dentry *dentry);
extern struct dentry *amfs_lookup(struct inode *dir, struct dentry *dentry,
unsigned int flags);
extern struct inode *amfs_iget(struct super_block *sb,
struct inode *lower_inode);
extern int amfs_interpose(struct dentry *dentry, struct super_block *sb,
struct path *lower_path);

/* file private data */
struct amfs_file_info {
	struct file *lower_file;
	const struct vm_operations_struct *lower_vm_ops;
};

/* amfs inode data in memory */
struct amfs_inode_info {
	struct inode *lower_inode;
	struct inode vfs_inode;
};

/* amfs dentry data in memory */
struct amfs_dentry_info {
	spinlock_t lock;	/* protects lower_path */
	struct path lower_path;
};

/* amfs super-block data in memory */
struct amfs_sb_info {
	struct super_block *lower_sb;
	struct path patterndb_path;
	char   *patterndb_absolute_path; /* patterndb pathstring pointing in below buf array */
	char   patterndb_absolute_path_buf[256];
	__kernel_time_t patterndb_mtime; /* time when patterndb was last updated */
	char patterns[256][256]; /* Max 256 patterns of maxlenght 254,  second to last byte patterns[][254] holds null, 
								last byte patterns[][255] holds length of this pattern */
};

/*
* inode to private data
*
* Since we use containers and the struct inode is _inside_ the
* amfs_inode_info structure, AMFS_I will always (given a non-NULL
* inode pointer), return a valid non-NULL pointer.
*/
static inline struct amfs_inode_info *AMFS_I(const struct inode *inode)
{
	return container_of(inode, struct amfs_inode_info, vfs_inode);
}

/* dentry to private data */
#define AMFS_D(dent) ((struct amfs_dentry_info *)(dent)->d_fsdata)

/* superblock to private data */
#define AMFS_SB(super) ((struct amfs_sb_info *)(super)->s_fs_info)

/* file to private Data */
#define AMFS_F(file) ((struct amfs_file_info *)((file)->private_data))

/* file to lower file */
static inline struct file *amfs_lower_file(const struct file *f)
{
	return AMFS_F(f)->lower_file;
}

static inline void amfs_set_lower_file(struct file *f, struct file *val)
{
	AMFS_F(f)->lower_file = val;
}

/* inode to lower inode. */
static inline struct inode *amfs_lower_inode(const struct inode *i)
{
	return AMFS_I(i)->lower_inode;
}

static inline void amfs_set_lower_inode(struct inode *i, struct inode *val)
{
	AMFS_I(i)->lower_inode = val;
}

/* superblock to lower superblock */
static inline struct super_block *amfs_lower_super(
const struct super_block *sb)
{
	return AMFS_SB(sb)->lower_sb;
}

static inline void amfs_set_lower_super(struct super_block *sb,
struct super_block *val)
{
	AMFS_SB(sb)->lower_sb = val;
}

/* path based (dentry/mnt) macros */
static inline void pathcpy(struct path *dst, const struct path *src)
{
	dst->dentry = src->dentry;
	dst->mnt = src->mnt;
}
/* Returns struct path.  Caller must path_put it. */
static inline void amfs_get_lower_path(const struct dentry *dent,
struct path *lower_path)
{
	spin_lock(&AMFS_D(dent)->lock);
	pathcpy(lower_path, &AMFS_D(dent)->lower_path);
	path_get(lower_path);
	spin_unlock(&AMFS_D(dent)->lock);
	return;
}
static inline void amfs_put_lower_path(const struct dentry *dent,
struct path *lower_path)
{
	path_put(lower_path);
	return;
}
static inline void amfs_set_lower_path(const struct dentry *dent,
struct path *lower_path)
{
	spin_lock(&AMFS_D(dent)->lock);
	pathcpy(&AMFS_D(dent)->lower_path, lower_path);
	spin_unlock(&AMFS_D(dent)->lock);
	return;
}
static inline void amfs_reset_lower_path(const struct dentry *dent)
{
	spin_lock(&AMFS_D(dent)->lock);
	AMFS_D(dent)->lower_path.dentry = NULL;
	AMFS_D(dent)->lower_path.mnt = NULL;
	spin_unlock(&AMFS_D(dent)->lock);
	return;
}
static inline void amfs_put_reset_lower_path(const struct dentry *dent)
{
	struct path lower_path;
	spin_lock(&AMFS_D(dent)->lock);
	pathcpy(&lower_path, &AMFS_D(dent)->lower_path);
	AMFS_D(dent)->lower_path.dentry = NULL;
	AMFS_D(dent)->lower_path.mnt = NULL;
	spin_unlock(&AMFS_D(dent)->lock);
	path_put(&lower_path);
	return;
}

/* locking helpers */
static inline struct dentry *lock_parent(struct dentry *dentry)
{
	struct dentry *dir = dget_parent(dentry);
	mutex_lock_nested(&dir->d_inode->i_mutex, I_MUTEX_PARENT);
	return dir;
}

static inline void unlock_dir(struct dentry *dir)
{
	mutex_unlock(&dir->d_inode->i_mutex);
	dput(dir);
}


enum { amfs_opt_patterndb, amfs_opt_err };

static const match_table_t tokens = {
	{amfs_opt_patterndb, "patterndb=%s"},
	{amfs_opt_err, NULL}
};


/* SEE TECHNICAL DETAILS IN README.HW2*/
static inline int amfs_parse_options(struct amfs_sb_info *sbi, char *options)
{
	char *p;
	int token;
	int patterndb_set=0;
	substring_t args[MAX_OPT_ARGS];
	int err=0;
	struct file * patterndb_file=NULL;
	struct kstat patterndb_file_stat;
	loff_t ipos;
	int len,i,j,k,newline;
	char buffer[256*256+256];
	mm_segment_t old_fs;
	
	
	
	printk(KERN_INFO
	"amfs: In amfs_parse_options. \n");
	
	while ( (p = strsep(&options, ",")) != NULL )
	{
		if (!*p)
			continue;
		
		token = match_token(p, tokens, args);
		switch (token)
		{
			case amfs_opt_patterndb:
			
			patterndb_file=filp_open(args[0].from,O_RDONLY,0);
			if( IS_ERR(patterndb_file) )
			{
				printk(KERN_ERR
				"amfs: cannot open patterndb file\n");
				err=PTR_ERR(patterndb_file);
				goto out;
			}
			else
			{
				printk(KERN_INFO
				"amfs: openend patterndb file to read patterns\n");
				
				if( (err=vfs_getattr(&patterndb_file->f_path,&patterndb_file_stat)) )
				{
					printk(KERN_ERR
					"amfs: cannot stat patterndb file\n");
					err=-EAGAIN;
					goto out;
				}
				else
				{
					sbi->patterndb_mtime = patterndb_file_stat.mtime.tv_sec;
				}
				
				sbi->patterndb_absolute_path=dentry_path_raw(
				patterndb_file->f_path.dentry,sbi->patterndb_absolute_path_buf,256);
				
				//sbi->patterndb_path=patterndb_file->f_path;
				if( IS_ERR(sbi->patterndb_absolute_path) )
				{
					printk(KERN_ERR
					"amfs: cannot set amfs_sb_info.patterndb_absolute_path\n");
					err=-EFAULT;
					goto out;
				}
				else
				{
					printk(KERN_INFO
					"amfs: set amfs_sb_info.patterndb_absolute_path=%s\n",sbi->patterndb_absolute_path);
				}
				
				ipos=0;
				old_fs = get_fs();
				set_fs(get_ds());
				len=vfs_read(patterndb_file, buffer,sizeof(buffer),&ipos);
				set_fs(old_fs);
				printk(KERN_INFO
				"amfs: sizeof(buffer)=%d\n",sizeof(buffer));
				
				if( len<0 )
				{
					err=-EIO;
					printk(KERN_ERR
					"amfs: error reading patterns from patterndb file len=%d\n",len);
					goto out;
				}
				else if(len == 0)
				{
					printk(KERN_WARNING
					"amfs: patterndb file empty\n");
					for(i=0;i<256;i++)
					{
						sbi->patterns[i][0]=-1;
					}
					patterndb_set=1;
					goto out;
				}
				
				printk(KERN_INFO
				"amfs: patterndb file len=%d bytes\n",len);
				
				for(i=0;i<256;i++)
				{
					sbi->patterns[i][0]=-1;
				}
				
				for(i=0,j=0;i<len;j++)
				{
					newline=0;
					for(k=0;k<254 && newline==0 ;)
					{
						
						if(buffer[i]!='\n')
						{
					//		printk(KERN_INFO "amfs: parsedb  i=%d c=%c.\n",i,buffer[i]);
							sbi->patterns[j][k]=buffer[i];
						}
						else
						{
							sbi->patterns[j][k]='\0';
							newline=1;
							sbi->patterns[j][254]='\0';
							sbi->patterns[j][255]=k;
							printk(KERN_INFO
							"amfs: newline pattern[%d]=%s len=%d\n",j,sbi->patterns[j],sbi->patterns[j][255]);
						}
						
						i++;
						k++;
						if(i >= len)
						break;
					}
					if(!newline)
					{
						sbi->patterns[j][k]='\0';
						sbi->patterns[j][254]='\0';
						sbi->patterns[j][255]=k;
						printk(KERN_INFO
						"amfs: break pattern[%d]=%s len=%u\n",j,sbi->patterns[j],(unsigned char)sbi->patterns[j][255]);
					}
				}
			}
			patterndb_set=1;
			break;
			
			case amfs_opt_err:
			default:
			printk(KERN_WARNING
			"%s: amfs: unrecognized option [%s]\n",
			__func__, p);
		}
	}
	out:
	if(patterndb_file && !IS_ERR(patterndb_file))
	filp_close(patterndb_file,NULL);
	
	if(!patterndb_set)
	{
		err=-EINVAL;
		printk(KERN_ERR "amfs: Cannot parse pattern db option.\n");
	}
	
	
	return err;
	
}

/* SEE TECHNICAL DETAILS IN README.HW2*/
static inline int amfs_matchpattern(const char *s1, const char *s2, size_t buflen, size_t pattlen)
{
	//printk(KERN_INFO "amfs: in amfs_strstr.\n");
	
	if (!pattlen)
		return 0;
	while (buflen >= pattlen) {
		buflen--;
		if (!memcmp(s1, s2, pattlen))
			return 1;
		s1++;
	}
	return 0;
}

/* SEE TECHNICAL DETAILS IN README.HW2*/
static inline int amfs_update_patterndb_file(struct amfs_sb_info *amfs_sb)
{
	int i,len,err=0;
	struct file *patterndb_file=NULL;
	loff_t opos;
	char patt[256];
	
	printk(KERN_INFO "amfs: in amfs_update_patterndb_file\n");
	
	patterndb_file=filp_open(amfs_sb->patterndb_absolute_path,O_WRONLY|O_TRUNC,0);
	//patterndb_file=dentry_open(&amfs_sb->patterndb_path,O_WRONLY|O_TRUNC,current_cred());
	if( IS_ERR(patterndb_file) )
	{
		printk(KERN_ERR
		"amfs: cannot open patterndb file\n");
		err=PTR_ERR(patterndb_file);
		goto out;
	}
	
	opos=0;
	for(i=0;i<256;i++)
	{
		if(amfs_sb->patterns[i][0]!=-1)
		{
			len=amfs_sb->patterns[i][255];
			memcpy(patt,amfs_sb->patterns[i],len);
			patt[len]='\n';
			len=len+1;
			printk("amfs: writing pattern %s len=%hu to file.\n",amfs_sb->patterns[i],(unsigned short)len);
			if( __kernel_write(patterndb_file, patt,len,&opos)  < len )
			{
				printk(KERN_ERR "amfs: cannot write patterns in  patterndb file\n");
				err=-EIO;
				goto out;
			}
			
		}
	}
	
	printk(KERN_INFO "amfs: patterndb file at %s updated.\n",amfs_sb->patterndb_absolute_path);
	
	out:
	if(patterndb_file && !IS_ERR(patterndb_file))
	filp_close(patterndb_file,NULL);
	
	return err;
	
}

/* SEE TECHNICAL DETAILS IN README.HW2*/

static inline int amfs_check_for_malware_and_quarantine(struct file*lower_file,
														struct amfs_sb_info *amfs_sb,
														char *amfs_buf,
														int len,
														int quarantine)
{
	int i,err=0;
	struct timeval tv;
	
	
	for(i=0;i<256;i++)
	{
		if(amfs_sb->patterns[i][0]!=-1)
		{
			if(amfs_matchpattern(amfs_buf,amfs_sb->patterns[i],len,amfs_sb->patterns[i][255]))
			{
				err=-EBADF;
				printk(KERN_INFO "amfs: pattern=%s matches\n",amfs_sb->patterns[i]);
				
				do_gettimeofday(&tv);
				tv.tv_sec=htonl(tv.tv_sec);
				
				if(quarantine)
				{
					if(vfs_setxattr(lower_file->f_path.dentry,"user.Q",(char *)&tv.tv_sec,sizeof(tv.tv_sec),0))
					{
						printk(KERN_ERR "amfs: setxattr failed. Cannot quarantine file.\n");
					}
					else if(vfs_getxattr(lower_file->f_path.dentry,"user.Q",(char *)&tv.tv_sec,sizeof(tv.tv_sec)))
					{
						printk(KERN_INFO "amfs: setxattr. Quarantined file %s at epoch time %d.\n",
						lower_file->f_path.dentry->d_name.name,ntohl(tv.tv_sec));
					}
				}
				
				goto out ;
				
			}
		}
	}
	
	out:
	return err;
	
}
#endif	/* not _AMFS_H_ */
