---------------------------------
HOMEWORK 2
AMFS: Anti-malware File System
---------------------------------
Author: Karan Pugla
        SBU ID: 110452661


SECTIONS IN THIS FILE:
----------------------
- INSTALL 
- EXAMPLE USAGE 
- NON_EXTRA_CREDIT BASIC WORKING
- EXTRA_CREDIT WORKING
- TECHNICAL DETAILS: Changes made to wrapfs, Data structures and Algorithms


INSTALL:
--------
Using checkpatch.pl is avoided to fix the coding/indentation errors as its fixing procedure is experimental.
Using it seems to silent its errors/wraning but it makes code formatting unreadable.
- make 
- make modules_install
- make install
- To compile amfsctl
	cd ./fs/amfs/
	make
	This generates amfsctl binary in current directory.

* EXTRA_CREDIT: To compile with EXTRA_CREDIT enabled, append '-DEXTRA_CREDIT' to EXTRA_CFLAGS in Makefile located at
<linux-src-root>/fs/amfs/Makefile  
Before: EXTRA_CFLAGS += -DAMFS_VERSION=\"$(AMFS_VERSION)\"
After:  EXTRA_CFLAGS += -DAMFS_VERSION=\"$(AMFS_VERSION)\" -DEXTRA_CREDIT
in ./fs/amfs
run 
	- make clean
	- make
	This re-generates  amfs.ko with EXTRA_CREDIT enabled.



EXAMPLE USAGE:
--------------
Supppose patterndb file is located at /patterns/patterndb.txt
Directory /mnt/amfs exists.
# mount -t amfs -o patterndb=/patterns/patterndb.txt /mnt/amfs /mnt/amfs

Use amfsctl to list/add/remove patterns.
# amfsctl -h
USAGE: amfsctl [-l|-a <pattern>|-r <pattern>]  <path-to-amfs-mountpoint>
        -l:           List all patterns currently registered in AMFS
        -a <pattern>: Add a new pattern if it is not already registered
        -r <pattern>: Remove a pattern if it is registered.
        -h:           Show this help.



NON_EXTRA_CREDIT BASIC WORKING:
-------------------------------
Patterndb file supports 256 lines of patterns each not more than 254 characters.
Patterndb file should be kept outside amfs because it contains malware patterns and any read to it can quarantine it.
SEE TECHNICAL DETAILS for more information.
The logging of the amfs module is very descriptive and it logs all its actions using printk.
Quarantining a file means setting an extended attribute "user.Q" with value equal to the "EPOCH" time when the file 
is getting quarantined. SEE TECHNICAL DETAILS
Unquarantining a file means removing this "user.Q" extended attribute off the file.

- Mounting
  If 'patterndb' option is missing or the path cannot be opened/read, returns error and mount fails.
  All other unknown options are ignored with log messages.
  Complete patterndb file is read into a buffer and patterns[256][256] in amfs superblock is filled character by character.
  Patterns longer than 254 chars will be truncated to 254 and remaining chars will be treated as different pattern.

- IOCTL user level 
  Very robust user level application to list/add/remove patterns to amfs superblock.
  All error case of wrong option/parameter are handled.
  Descriptive error messages are printed for errors returned from kernel

- IOCTL kernel amfs level  
  3 ioctl numbers are supported AMFS_GETPATTERNS AMFS_SETPATTERNS AMFS_DELPATTERNS
  Return -EEXIST if pattern is already registered in case of AMFS_SETPATTERNS, -ENOENT in case of AMFS_DELPATTERNS
  if pattern is not registered, -ENOSPC if user tries to register more than 256 patterns. 
  Modified time of patterndb in amfs superblock is updated to record that patterndb has been changed
  which is to be use later to extend tri-state in EXTRA_CREDIT.
  
- Opening a file
  If no "user.Q" EA is set on file, open file and return success.
  Else return failiure.
  Returned error code is ENOENT.
  This error code is chosen since it is already one of the legal error code returned by 'open' syscall and will 
  not break existing user programs. Also, ENOENT(no such file or directory) must be returned since maliclous files
  are pretended to be non-existing.

- Reading a file
  If "user.Q" EA is set on file, reject read and return error.
  Again, the returned error is ENOENT for above similar reasons.
  Else, substitute the user buffer with amfs buffer and call lower FS read.
  Scan the buffer for malware. If no malware is matched, copy this buffer to user buffer.
  If malware is found, quarantine the file and return error. Error returned is EBADF since it is already one of the legal 
  returned error code of 'read' syscall and is descriptive of the nature of the event that has just happened.
  File is quarantined, by setting its EA as user.Q with value equal to current time in EPOCH seconds.
  Current time is set which is to be used later for extending the module for EXTRA_CREDIT.

- Writing a file. 
  Similar to read except that buffer is scanned before calling the write of lower FS.
  This also implies that if an attempt is made to write something malicious to a file, the attempt will be rejected 
  and file will be quarantined but no malicious content will be written to the file.

**Note: To provide architecture independence, endiannes is overcome by storing the value of EA in network-byte order.
        htonl and ntohl helper functions are used.
  

- Hiding quarantined files.
  Quarantined files are hidden  and cannot be listed under a directory. For e.g. in output of 'ls' command.
  In amfs_readdir, user ctx is replaced with amfs ctx. Actor method of this ctx is set to amfs_filldir.
  Buffer of amfs ctx is scanned for names and quarantined EA is check on the files inside directory using 
  lookup_one_len. Users's ctx actor method is called only for directory entries with no quarantine EA set.

- No one can unquarantine the malicious file. Nobody, not even the root user can delete the EA user.Q
  amfs_setxattr and amfs_removexattr functions check if the name of EA user trying to modify is 'user.Q', then
  reject operation else let user set whatever EA he wants.

- But quarantined files can be deleted.
- Since files marked quarantine cannot be opened, read or written, lookups performed on the quarantined fined cannot harm
  system and users in anyway, so lookups are not blocked as it is necessary to unlink/remove the file.

EXTRA_CREDIT:
------------
- amfs specific filldir has been used to hide files from 'getdents/readdir' system calls. SEE TECHNICAL DETAILS
- Only AMFS  can delete the EA user.Q, nobody else can delete. And that will be deleted only when AMFS 
  has verified that file has now become eligible to be unquarantined, described below.
- Add support to scan whole files on open and close.
  Efficient scanning of large files. Files are scanned using a PAGE_SIZE buffer.
  Algorithm takes  care of pattern buffer-crossover.
  Since max length of pattern is known to be 254 bytes, last 253 bytes from previous read are re-read again
  into the buffer to detect malware that cross buffer boundaries.
- Aleady BAD marked files are  scanned only if patterndb has changed since the 'time' file was marked bad.
- If patterndb was updated and full-scan of file determines file is clean now, remove EA user.Q and unquarantine the file.
- If patterndb was updated and full-scan of file determined file is still has malware, reject open and retrun error.

- (Open full-scan) If open mode of file indicates that it will be READ, do full-scan before opening.
  This must be done here in open because only the algorithm used in open full-scan can catch buffer-crossover scenarios,
  subsequent read operations use simpler algorithm and cannot detect buffer-crossovers.
  If malware is detected in open, quarantine file and return error.
- (Close full-scan) If open mode of file indicates that it is opened in WRITE mode, do full-scan of it before closing.
  If malware is detected, quarantine file. This full-scan must be done here in close because only the algorithm used in 
  close full-scan can catch buffer-crossover scenarios, write operations use simpler algorithm and cannot detect 
  buffer-crossovers.


TECHNICAL DETAILS: Changes made to wrapfs, Data structures and Algorithms


#ioctl
typedef char amfs_allpatterns_t[256][256]; // All patterns buffer returned from kernel
typedef char amfs_pattern_t[256]; // Pattern used to pass to kernel to set/remove.

#define AMFS_GETPATTERNS  _IOR('f', 4, amfs_allpatterns_t *)
#define AMFS_SETPATTERN   _IOW('f', 5, amfs_pattern_t)
#define AMFS_DELPATTERN   _IOW('f', 6, amfs_pattern_t)



#struct amfs_sb_info {
    struct super_block *lower_sb;
    struct path patterndb_path;
    char   *patterndb_absolute_path; /* patterndb pathstring pointing in below buf array */
    char   patterndb_absolute_path_buf[256];
    __kernel_time_t patterndb_mtime; /* time when patterndb was last updated */
    char patterns[256][256]; /* Max 256 patterns of maxlenght 254,  second to last byte patterns[][254] holds null,
                                last byte patterns[][255] holds length of this pattern */
};
 
#amfs_parse_options(struct amfs_sb_info *sbi, char *options)
	Uses parser.c helper functions to parse mount options.

#amfs_check_for_malware_and_quarantine(struct file*lower_file,
                                                        struct amfs_sb_info *amfs_sb,
                                                        char *amfs_buf,
                                                        int len,
                                                        int quarantine)
	Calls amfs_matchpattern for every pattern in superblock. If pattern matches, returns error and quarantine file.

#amfs_matchpattern(const char *s1, const char *s2, size_t buflen, size_t pattlen)
	Uses memcmp to compare match pattern pattlen long pattern s2 in buflen long buffer s1.

#amfs_update_patterndb_file(struct amfs_sb_info *amfs_sb)
 	Truncates patterndb file and fills it with patterns in amfs superblock.

#amfs_filldir64
	Modified filldir64. Modified to fill kernel buffer instead of user buffer. Replaced put_user with memcpy.

DELIVERABLES:
-------------
<linux-src-root>/fs/amfs/amfs.ko
<linux-src-root>/fs/amfs/amfsctl

This filesystem has two deliverables. One is the linux filesystem module amfs.ko
and other is user-level program amfsctl to demonstrate ioctl supported by the filesystem.

